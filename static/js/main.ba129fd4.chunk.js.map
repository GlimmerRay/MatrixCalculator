{"version":3,"sources":["App.js","index.js"],"names":["Cell","e","this","props","setValue","target","value","rowNum","colNum","setMatrix","type","className","onChange","bind","React","Component","Dimension","Promise","resolve","reject","then","Error","message","Matrix","makeCells","state","numRows","defaultRows","numRowsDisplay","numCols","defaultCols","numColsDisplay","cells","initCells","frozen","makeEmptyMatrix","rows","i","push","j","parseInt","setState","row","setCell","matrix","getMatrix","index","setNumRows","setNumCols","Calculator","inputMatrices","outputMatrix","outputIsHidden","errorMessage","length","k","matrix1","matrix2","matricesAreFull","dimensionsMatch","canDotProduct","x","y","output","setMatrices","onClick","dotProduct","values","FrozenMatrix","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAGMA,G,6KAEKC,GACPC,KAAKC,MAAMC,SAASH,EAAEI,OAAOC,MAAOJ,KAAKC,MAAMI,OAAQL,KAAKC,MAAMK,QAClEN,KAAKC,MAAMM,c,+BAIX,OACE,uBAAOC,KAAK,SAASC,UAAU,aAAaL,MAAOJ,KAAKC,MAAMG,MAAOM,SAAUV,KAAKU,SAASC,KAAKX,Y,GATrFY,IAAMC,YAcnBC,E,uKAEKf,GAAI,IAAD,OACNG,EAAWF,KAAKC,MAAMC,SACZ,IAAIa,SAAQ,SAASC,EAASC,GAC1Cf,EAASH,EAAEI,OAAOC,OAClBY,OAEME,MAAM,WAAO,EAAKjB,MAAMM,iB,+BAIhC,OACE,uBAAOC,KAAK,SAASC,UAAU,YAAYL,MAAOJ,KAAKC,MAAMG,MAAOM,SAAUV,KAAKU,SAASC,KAAKX,Y,GAb/EY,IAAMC,WAkBxBM,E,uKAEJ,OAAO,mBAAGV,UAAU,eAAb,SAA6BT,KAAKC,MAAMmB,c,GAF7BR,IAAMC,WAMpBQ,E,kDAEJ,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,UAAY,EAAKA,UAAUX,KAAf,gBACjB,EAAKY,MAAQ,CACXC,QAAS,EAAKvB,MAAMwB,YACpBC,eAAgB,EAAKzB,MAAMwB,YAC3BE,QAAS,EAAK1B,MAAM2B,YACpBC,eAAgB,EAAK5B,MAAM2B,YAC3BE,MAAO,EAAKC,YACZC,QAAQ,GATO,E,gEAcjBhC,KAAKO,c,kCAIL,OAAOP,KAAKiC,gBAAgB,EAAG,K,sCAGjBT,EAASG,GAEvB,IADA,IAAIO,EAAO,GACFC,EAAE,EAAGA,EAAEX,EAASW,IAAK,CAC5BD,EAAKE,KAAK,IACV,IAAK,IAAIC,EAAE,EAAGA,EAAEV,EAASU,IACvBH,EAAKC,GAAGC,KAAK,IAGjB,OAAOF,I,iCAGE9B,GACT,GAAc,KAAVA,EAAJ,CAIA,IAAIoB,EAAUc,SAASlC,GACnBoB,EAAU,IACZA,EAAU,GAEZxB,KAAKuC,SAAS,CAACb,eAAgBF,IAC/BxB,KAAKuC,SAAS,CAACf,QAASA,SARtBxB,KAAKuC,SAAS,CAACb,eAAgB,O,iCAWxBtB,GACT,GAAc,KAAVA,EAAJ,CAIA,IAAIuB,EAAUW,SAASlC,GACnBuB,EAAU,IACZA,EAAU,GAEZ3B,KAAKuC,SAAS,CAACV,eAAgBF,IAC/B3B,KAAKuC,SAAS,CAACZ,QAASA,SARtB3B,KAAKuC,SAAS,CAACV,eAAgB,O,8BAW3BzB,EAAOC,EAAQC,GACrB,IAAIwB,EAAQ9B,KAAKuB,MAAMO,MACvBA,EAAMzB,GAAQC,GAAUF,EACxBJ,KAAKuC,SAAS,CAACT,MAAOA,M,gCAGdN,EAASG,GAEjB,IADA,IAAIO,EAAO,GACFC,EAAE,EAAGA,EAAEX,EAASW,IAAK,CAE5B,IADA,IAAIK,EAAM,GACDH,EAAE,EAAGA,EAAEV,EAASU,IACvBG,EAAIJ,KAAK,cAAC,EAAD,CACP/B,OAAQ8B,EACR7B,OAAQ+B,EACRjC,MAAOJ,KAAKuB,MAAMO,MAAMK,GAAGE,GAC3B5B,UAAU,aACVP,SAAUF,KAAKyC,QAAQ9B,KAAKX,MAC5BO,UAAWP,KAAKO,UAAUI,KAAKX,SAInCkC,EAAKE,KAAK,8BAAMI,KAElB,OAAON,I,kCAOP,IAHA,IAAIV,EAAUxB,KAAKuB,MAAMC,QACrBG,EAAU3B,KAAKuB,MAAMI,QACrBe,EAAS1C,KAAKiC,gBAAgBT,EAASG,GAClCQ,EAAE,EAAGA,EAAEX,EAASW,IACvB,IAAK,IAAIE,EAAE,EAAGA,EAAEV,EAASU,IAAK,CAC5B,IAAIjC,EAAQJ,KAAKuB,MAAMO,MAAMK,GAAGE,GAChCK,EAAOP,GAAGE,GAAKjC,EAGnB,OAAOsC,I,kCAIP,IAAIA,EAAS1C,KAAK2C,YACdC,EAAQ5C,KAAKC,MAAM2C,MACvB5C,KAAKC,MAAMM,UAAUqC,EAAOF,K,+BAI5B,IAAIZ,EAAQ9B,KAAKsB,UAAUtB,KAAKuB,MAAMC,QAASxB,KAAKuB,MAAMI,SAC1D,OAAO,sBAAKlB,UAAU,SAAf,UACL,cAAC,EAAD,CACEA,UAAU,YACVP,SAAUF,KAAK6C,WAAWlC,KAAKX,MAC/BO,UAAWP,KAAKO,UAAUI,KAAKX,MAC/BI,MAAOJ,KAAKuB,MAAMG,iBACpB,sBAAMjB,UAAU,IAAhB,eACA,cAAC,EAAD,CACEA,UAAU,YACVP,SAAUF,KAAK8C,WAAWnC,KAAKX,MAC/BO,UAAWP,KAAKO,UAAUI,KAAKX,MAC/BI,MAAOJ,KAAKuB,MAAMM,iBACpB,8BAAMC,W,GAvHSlB,IAAMC,WA4HrBkC,E,kDAEJ,WAAY9C,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXyB,cAAe,GACfC,aAAc,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,IACpCC,gBAAgB,EAChBC,aAAc,IANC,E,wDAUPP,EAAOF,GACjB,IAAIM,EAAgBhD,KAAKuB,MAAMyB,cAC/BA,EAAcJ,GAASF,EACvB1C,KAAKuC,SAAS,CAACS,cAAeA,M,wCAI9B,IAAK,IAAIb,EAAE,EAAGA,EAAEnC,KAAKuB,MAAMyB,cAAcI,OAAQjB,IAE/C,IADA,IAAIO,EAAS1C,KAAKuB,MAAMyB,cAAcb,GAC7BE,EAAE,EAAGA,EAAEK,EAAOU,OAAQf,IAC7B,IAAK,IAAIgB,EAAE,EAAGA,EAAEX,EAAO,GAAGU,OAAQC,IAChC,GAAqB,KAAjBX,EAAOL,GAAGgB,GACZ,OAAO,EAKf,OAAO,I,wCAIP,IAAIC,EAAUtD,KAAKuB,MAAMyB,cAAc,GACnCO,EAAUvD,KAAKuB,MAAMyB,cAAc,GACvC,OAAIM,EAAQ,GAAGF,QAAUG,EAAQH,S,sCAOjC,OAAKpD,KAAKwD,kBAILxD,KAAKyD,mBAIVzD,KAAKuC,SAAS,CAACY,aAAc,MACtB,IAJLnD,KAAKuC,SAAS,CAACY,aAAc,6BACtB,IALPnD,KAAKuC,SAAS,CAACY,aAAc,2BACtB,K,mCAWT,GAAKnD,KAAK0D,gBAAV,CAOA,IAJA,IAAIC,EAAI3D,KAAKuB,MAAMyB,cAAc,GAC7BY,EAAI5D,KAAKuB,MAAMyB,cAAc,GAE7Ba,EAAS,GACJ1B,EAAE,EAAGA,EAAIwB,EAAEP,OAAQjB,IAAK,CAC/B0B,EAAOzB,KAAK,IACZ,IAAK,IAAIC,EAAE,EAAGA,EAAIuB,EAAE,GAAGR,OAAQf,IAAK,CAClCwB,EAAO1B,GAAGC,KAAK,GACf,IAAK,IAAIiB,EAAE,EAAGA,EAAEM,EAAE,GAAGP,OAAQC,IAC3BQ,EAAO1B,GAAGE,IAAMsB,EAAExB,GAAGkB,GAAKO,EAAEP,GAAGhB,IAQrC,OAJArC,KAAKuC,SAAS,CACZU,aAAcY,EACdX,gBAAgB,IAEXW,K,+BAIP,OAAI7D,KAAKuB,MAAM2B,eAEX,sBAAKzC,UAAU,aAAf,UACE,cAAC,EAAD,CAAQgB,YAAY,IAAIG,YAAY,IAAIgB,MAAO,EAAGrC,UAAWP,KAAK8D,YAAYnD,KAAKX,QACnF,wBAAQ+D,QAAS/D,KAAKgE,WAAWrD,KAAKX,MAAtC,iBACA,cAAC,EAAD,CAAQyB,YAAY,IAAIG,YAAY,IAAIgB,MAAO,EAAGrC,UAAWP,KAAK8D,YAAYnD,KAAKX,QACnF,cAAC,EAAD,CAAOoB,QAASpB,KAAKuB,MAAM4B,kBAK7B,sBAAK1C,UAAU,aAAf,UACE,cAAC,EAAD,CAAQgB,YAAY,IAAIG,YAAY,IAAIgB,MAAO,EAAGrC,UAAWP,KAAK8D,YAAYnD,KAAKX,QACnF,wBAAQ+D,QAAS/D,KAAKgE,WAAWrD,KAAKX,MAAtC,iBACA,cAAC,EAAD,CAAQyB,YAAY,IAAIG,YAAY,IAAIgB,MAAO,EAAGrC,UAAWP,KAAK8D,YAAYnD,KAAKX,QACnF,cAAC,EAAD,CAAciE,OAAQjE,KAAKuB,MAAM0B,eACjC,cAAC,EAAD,CAAO7B,QAASpB,KAAKuB,MAAM4B,sB,GA/FZvC,IAAMC,WAsGzBqD,E,kDACJ,WAAYjE,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACX0C,OAAQ,EAAKhE,MAAMgE,OACnBnC,MAAO,EAAKR,UAAU,EAAKrB,MAAMgE,SAJlB,E,sDAQTA,GAER,IADA,IAAI/B,EAAO,GACFC,EAAE,EAAGA,EAAE8B,EAAOb,OAAQjB,IAAK,CAElC,IADA,IAAIK,EAAM,GACDH,EAAE,EAAGA,EAAE4B,EAAO,GAAGb,OAAQf,IAChCG,EAAIJ,KAAK,cAAC,EAAD,CACP/B,OAAQ8B,EACR7B,OAAQ+B,EACRjC,MAAO6D,EAAO9B,GAAGE,GACjB5B,UAAU,gBAIdyB,EAAKE,KAAK,8BAAMI,KAElB,OAAON,I,+BAIP,OAAO,8BAAMlC,KAAKsB,UAAUtB,KAAKC,MAAMgE,c,GA5BhBrD,IAAMC,WA0ClBsD,MARf,WACE,OACE,qBAAK1D,UAAU,MAAf,SACE,cAAC,EAAD,OC1SN2D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ba129fd4.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\nclass Cell extends React.Component {\n\n  onChange(e) {\n    this.props.setValue(e.target.value, this.props.rowNum, this.props.colNum)\n    this.props.setMatrix()\n  }\n\n  render() {\n    return (\n      <input type='number' className=\"cell-input\" value={this.props.value} onChange={this.onChange.bind(this)}/>\n    )\n  }\n}\n\nclass Dimension extends React.Component {\n\n  onChange(e) {\n    var setValue = this.props.setValue\n    var promise = new Promise(function(resolve, reject) {\n      setValue(e.target.value)\n      resolve()\n    })\n    promise.then( () => {this.props.setMatrix()})\n  }\n\n  render() {\n    return (\n      <input type='number' className=\"dim-input\" value={this.props.value} onChange={this.onChange.bind(this)}/>\n    )\n  }\n}\n\nclass Error extends React.Component {\n  render() {\n  return <p className='errorMessage'>{this.props.message}</p>\n  }\n}\n\nclass Matrix extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.makeCells = this.makeCells.bind(this)\n    this.state = {\n      numRows: this.props.defaultRows,\n      numRowsDisplay: this.props.defaultRows,\n      numCols: this.props.defaultCols,\n      numColsDisplay: this.props.defaultCols,\n      cells: this.initCells(),\n      frozen: false\n    }\n  }\n\n  componentDidMount() {\n    this.setMatrix()\n  }\n\n  initCells() {\n    return this.makeEmptyMatrix(5, 5)\n  }\n\n  makeEmptyMatrix(numRows, numCols) {\n    var rows = []\n    for (var i=0; i<numRows; i++) {\n      rows.push([])\n      for (var j=0; j<numCols; j++) {\n        rows[i].push('')\n      }\n    }\n    return rows\n  }\n\n  setNumRows(value) {\n    if (value === '') {\n      this.setState({numRowsDisplay: ''})\n      return\n    }\n    var numRows = parseInt(value)\n    if (numRows > 5) {\n      numRows = 5\n    }\n    this.setState({numRowsDisplay: numRows})\n    this.setState({numRows: numRows})\n  }\n\n  setNumCols(value) {\n    if (value === '') {\n      this.setState({numColsDisplay: ''})\n      return\n    }\n    var numCols = parseInt(value)\n    if (numCols > 5) {\n      numCols = 5\n    }\n    this.setState({numColsDisplay: numCols})\n    this.setState({numCols: numCols})\n  }\n\n  setCell(value, rowNum, colNum) {\n    var cells = this.state.cells\n    cells[rowNum][colNum] = value\n    this.setState({cells: cells})\n  }\n\n  makeCells(numRows, numCols) {\n    var rows = []\n    for (var i=0; i<numRows; i++) {\n      var row = []\n      for (var j=0; j<numCols; j++) {\n        row.push(<Cell \n          rowNum={i} \n          colNum={j} \n          value={this.state.cells[i][j]} \n          className=\"cell-input\" \n          setValue={this.setCell.bind(this)} \n          setMatrix={this.setMatrix.bind(this)}\n          />\n        )\n      }\n      rows.push(<div>{row}</div>)\n    }\n    return rows\n  }\n\n  getMatrix() {\n    var numRows = this.state.numRows\n    var numCols = this.state.numCols\n    var matrix = this.makeEmptyMatrix(numRows, numCols)\n    for (var i=0; i<numRows; i++) {\n      for (var j=0; j<numCols; j++) {\n        var value = this.state.cells[i][j]\n        matrix[i][j] = value\n      }\n    }\n    return matrix\n  }\n\n  setMatrix() {\n    var matrix = this.getMatrix()\n    var index = this.props.index\n    this.props.setMatrix(index, matrix)\n  }\n\n  render() {\n    var cells = this.makeCells(this.state.numRows, this.state.numCols)\n    return <div className=\"matrix\">\n      <Dimension \n        className=\"dim-input\" \n        setValue={this.setNumRows.bind(this)}  \n        setMatrix={this.setMatrix.bind(this)}\n        value={this.state.numRowsDisplay}/>\n      <span className=\"x\">X</span>\n      <Dimension \n        className=\"dim-input\" \n        setValue={this.setNumCols.bind(this)} \n        setMatrix={this.setMatrix.bind(this)}\n        value={this.state.numColsDisplay}/>\n      <div>{cells}</div>\n    </div>\n  }\n}\n\nclass Calculator extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      inputMatrices: [],\n      outputMatrix: [[1,2,3],[4,5,6],[7,8,9]],\n      outputIsHidden: true,\n      errorMessage: ''\n    }\n  }\n  \n  setMatrices(index, matrix) {\n    var inputMatrices = this.state.inputMatrices\n    inputMatrices[index] = matrix\n    this.setState({inputMatrices: inputMatrices})\n  }\n\n  matricesAreFull() {\n    for (var i=0; i<this.state.inputMatrices.length; i++) {\n      var matrix = this.state.inputMatrices[i]\n      for (var j=0; j<matrix.length; j++) {\n        for (var k=0; k<matrix[0].length; k++) {\n          if (matrix[j][k] === '') {\n            return false\n          }\n        }\n      }\n    }\n    return true\n  }\n\n  dimensionsMatch() {\n    var matrix1 = this.state.inputMatrices[0]\n    var matrix2 = this.state.inputMatrices[1]\n    if (matrix1[0].length != matrix2.length) {\n      return false\n    }\n    return true\n  }\n\n  canDotProduct() {\n    if (!this.matricesAreFull()) {\n      this.setState({errorMessage: 'Cells cannot be empty'})\n      return false\n    }\n    if (!this.dimensionsMatch()) {\n      this.setState({errorMessage: 'Incompatible dimensions'})\n      return false\n    }\n    this.setState({errorMessage: ''})\n    return true\n  }\n\n  dotProduct() {\n    if (!this.canDotProduct()) {\n      return\n    }\n    var x = this.state.inputMatrices[0]\n    var y = this.state.inputMatrices[1]\n\n    var output = []\n    for (var i=0; i < x.length; i++) {\n      output.push([])\n      for (var j=0; j < y[0].length; j++) {\n        output[i].push(0)\n        for (var k=0; k<x[0].length; k++) {\n          output[i][j] += x[i][k] * y[k][j]\n        }\n      }\n    }\n    this.setState({\n      outputMatrix: output,\n      outputIsHidden: false\n    })\n    return output\n  }\n\n  render() {\n    if (this.state.outputIsHidden)\n      return (\n        <div className=\"Calculator\">\n          <Matrix defaultRows=\"2\" defaultCols=\"2\" index={0} setMatrix={this.setMatrices.bind(this)}/>\n          <button onClick={this.dotProduct.bind(this)}>Dot</button>\n          <Matrix defaultRows=\"2\" defaultCols=\"2\" index={1} setMatrix={this.setMatrices.bind(this)}/>\n          <Error message={this.state.errorMessage}/>\n        </div>\n      )\n    else {\n      return (\n        <div className=\"Calculator\">\n          <Matrix defaultRows=\"2\" defaultCols=\"2\" index={0} setMatrix={this.setMatrices.bind(this)}/>\n          <button onClick={this.dotProduct.bind(this)}>Dot</button>\n          <Matrix defaultRows=\"2\" defaultCols=\"2\" index={1} setMatrix={this.setMatrices.bind(this)}/>\n          <FrozenMatrix values={this.state.outputMatrix} />\n          <Error message={this.state.errorMessage}/>\n        </div>\n      )\n    }\n  }\n}\n\nclass FrozenMatrix extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      values: this.props.values,\n      cells: this.makeCells(this.props.values)\n    }\n  }\n\n  makeCells(values) {\n    var rows = []\n    for (var i=0; i<values.length; i++) {\n      var row = []\n      for (var j=0; j<values[0].length; j++) {\n        row.push(<Cell \n          rowNum={i} \n          colNum={j} \n          value={values[i][j]} \n          className=\"cell-input\" \n          />\n        )\n      }\n      rows.push(<div>{row}</div>)\n    }\n    return rows\n  }\n\n  render() {\n    return <div>{this.makeCells(this.props.values)}</div>\n  }\n}\n\n// I need a matrix component that just accepts a 2d array and displays it\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; \n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}